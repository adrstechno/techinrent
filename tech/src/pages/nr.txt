import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Link } from "wouter";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger
} from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { formatDistanceToNow } from "date-fns";
import {
  Mail,
  Phone,
  Clipboard,
  Calendar,
  User,
  Building,
  Briefcase,
  Download,
  Lock,
  Clock,
  MessageCircle,
  Trash2
} from "lucide-react";

// Function to export data to CSV
function exportToCSV(data, filename) {
  if (!data || data.length === 0) return;

  let csvContent = "";
  let headers = [];

  if (filename === 'contact-messages') {
    headers = ['ID', 'Name', 'Email', 'Subject', 'Message', 'Created At', 'Read Status'];
    csvContent = headers.join(',') + '\n';
    data.forEach(row => {
      const values = [
        row.id,
        `"${row.name?.replace(/"/g, '""') || ''}"`,
        `"${row.email?.replace(/"/g, '""') || ''}"`,
        `"${row.subject?.replace(/"/g, '""') || ''}"`,
        `"${row.message?.replace(/"/g, '""') || ''}"`,
        new Date(row.createdAt).toLocaleString(),
        row.isRead ? 'Read' : 'Unread'
      ];
      csvContent += values.join(',') + '\n';
    });
  } else if (filename === 'demo-requests') {
    headers = ['ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Company', 'Designation', 'Created At', 'Read Status'];
    csvContent = headers.join(',') + '\n';
    data.forEach(row => {
      const values = [
        row.id,
        `"${row.firstName?.replace(/"/g, '""') || ''}"`,
        `"${row.lastName?.replace(/"/g, '""') || ''}"`,
        `"${row.email?.replace(/"/g, '""') || ''}"`,
        `"${row.phone?.replace(/"/g, '""') || ''}"`,
        `"${row.company?.replace(/"/g, '""') || 'Not specified'}"`,
        `"${row.designation?.replace(/"/g, '""') || ''}"`,
        new Date(row.createdAt).toLocaleString(),
        row.isRead ? 'Read' : 'Unread'
      ];
      csvContent += values.join(',') + '\n';
    });
  } else if (filename === 'provider-registrations') {
    headers = ['ID', 'Full Name', 'Email', 'Phone', 'LinkedIn URL', 'Profile Status', 'Additional Info', 'Created At', 'Read Status'];
    csvContent = headers.join(',') + '\n';
    data.forEach(row => {
      const values = [
        row.id,
        `"${row.fullName?.replace(/"/g, '""') || ''}"`,
        `"${row.email?.replace(/"/g, '""') || ''}"`,
        `"${row.phone?.replace(/"/g, '""') || ''}"`,
        `"${row.linkedinUrl?.replace(/"/g, '""') || ''}"`,
        row.profileStatus,
        `"${row.additionalInfo?.replace(/"/g, '""') || ''}"`,
        new Date(row.createdAt).toLocaleString(),
        row.isRead ? 'Read' : 'Unread'
      ];
      csvContent += values.join(',') + '\n';
    });
  } else if (filename === 'linkedin-connection-orders') {
    headers = ['ID', 'Customer Name', 'Email', 'Phone', 'LinkedIn URL', 'Connections', 'Package', 'Total Price', 'Payment Method', 'Status', 'Created At', 'Read Status'];
    csvContent = headers.join(',') + '\n';
    data.forEach(row => {
      const values = [
        row.id,
        `"${row.customerName?.replace(/"/g, '""') || ''}"`,
        `"${row.email?.replace(/"/g, '""') || ''}"`,
        `"${row.phone?.replace(/"/g, '""') || ''}"`,
        `"${row.linkedinUrl?.replace(/"/g, '""') || ''}"`,
        row.connections,
        `"${row.packageName?.replace(/"/g, '""') || ''}"`,
        `$${row.totalPrice}`,
        `"${row.paymentMethod?.replace(/"/g, '""') || ''}"`,
        row.status,
        new Date(row.createdAt).toLocaleString(),
        row.isRead ? 'Read' : 'Unread'
      ];
      csvContent += values.join(',') + '\n';
    });
  }

  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.setAttribute('href', url);
  link.setAttribute('download', `${filename}-${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// Safer fetcher function for react-query
const fetcher = async (url) => {
  const response = await fetch(url, {
    credentials: 'include',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  const contentType = response.headers.get('content-type');

  if (!response.ok) {
    const errorText = await response.text(); // in case it's HTML
    throw new Error(`Error fetching ${url}: ${response.status} - ${errorText}`);
  }

  if (contentType && contentType.includes('application/json')) {
    const data = await response.json();
    return data.data || [];
  } else {
    const text = await response.text();
    throw new Error(`Expected JSON but got: ${text.slice(0, 100)}...`);
  }
};


export default function Admin() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState("contact");

  // React Query hooks for fetching data
  const contactQuery = useQuery({
    queryKey: ['contact-messages'],
    queryFn: () => fetcher('/api/admin/contacts'),
    initialData: [],
  });

  const demoQuery = useQuery({
    queryKey: ['demo-requests'],
    queryFn: () => fetcher('/api/demos'),
    initialData: [],
  });

  const providerQuery = useQuery({
    queryKey: ['provider-inquiries'],
    queryFn: () => fetcher('/api/admin/providers'),
    initialData: [],
  });

  const linkedinOrdersQuery = useQuery({
    queryKey: ['linkedin-connection-orders'],
    queryFn: () => fetcher('/api/admin/orders'),
    initialData: [],
  });

  // Function to handle mutations (mark as read, delete, update)
  const createMutation = (url, method, successMessage, errorMessage, refetchQueries) => {
    return useMutation({
      mutationFn: ({ id, payload }) => fetch(
        payload ? `${url}/${id}` : `${url}/${id}`, {
        method,
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: payload ? JSON.stringify(payload) : undefined,
      }).then(res => {
        if (!res.ok) throw new Error(errorMessage);
        return res.json();
      }),
      onSuccess: () => {
        toast({ title: "Success", description: successMessage });
        refetchQueries.forEach(queryKey => queryClient.invalidateQueries({ queryKey }));
      },
      onError: (error) => {
        toast({ title: "Error", description: error.message || errorMessage, variant: "destructive" });
      },
    });
  };

  // Mark as read mutations
  const markContactAsReadMutation = createMutation('/api/admin/contacts', 'POST', 'Message marked as read', 'Failed to mark message as read', ['contact-messages']);
  const markDemoAsReadMutation = createMutation('/api/admin/demos', 'POST', 'Demo request marked as read', 'Failed to mark demo request as read', ['demo-requests']);
  const markProviderAsReadMutation = createMutation('/api/admin/providers', 'POST', 'Provider registration marked as read', 'Failed to mark provider registration as read', ['provider-inquiries']);
  const markLinkedinOrderAsReadMutation = createMutation('/api/admin/orders', 'POST', 'Order marked as read', 'Failed to mark order as read', ['linkedin-connection-orders']);

  // Delete mutations
  const deleteContactMutation = createMutation('/api/admin/contacts', 'DELETE', 'Contact message deleted successfully', 'Failed to delete contact message', ['contact-messages']);
  const deleteDemoMutation = createMutation('/api/admin/demos', 'DELETE', 'Demo request deleted successfully', 'Failed to delete demo request', ['demo-requests']);
  const deleteProviderMutation = createMutation('/api/admin/inquiries', 'DELETE', 'Provider registration deleted successfully', 'Failed to delete provider registration', ['provider-inquiries']);
  const deleteLinkedinOrderMutation = createMutation('/api/admin/orders', 'DELETE', 'LinkedIn order deleted successfully', 'Failed to delete LinkedIn order', ['linkedin-connection-orders']);

  // Update order status mutation
  const updateLinkedInOrderStatusMutation = createMutation('/api/admin/orders', 'PUT', 'Order status updated successfully', 'Failed to update order status', ['linkedin-connection-orders']);

  const handleDelete = (mutationFn, id, message) => {
    if (window.confirm(`Are you sure you want to delete this ${message}? This action cannot be undone.`)) {
      mutationFn.mutate({ id });
    }
  };

  const renderLoading = () => <div className="text-center py-10">Loading...</div>;
  const renderError = (error) => <div className="text-center py-10 text-red-500">Error: {error.message}</div>;
  const renderNoData = (message) => <div className="text-center py-10 text-gray-500">{`No ${message} found.`}</div>;

  return (
    <div className="min-h-screen bg-skyblue/30">
      <div className="container mx-auto py-6 px-4 sm:py-10">
        <div className="mb-8">
          <h1 className="text-2xl sm:text-3xl font-bold text-primary mb-2">Admin Dashboard</h1>
          <p className="text-gray-600">Manage your platform data and monitor activities</p>
        </div>

        <Tabs defaultValue="contact" value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 h-auto p-1 gap-1">
            <TabsTrigger value="contact" className="text-xs sm:text-sm py-2 px-1 sm:px-2">
              Contact
            </TabsTrigger>
            <TabsTrigger value="demo" className="text-xs sm:text-sm py-2 px-1 sm:px-2">
              Demo
            </TabsTrigger>
            <TabsTrigger value="provider" className="text-xs sm:text-sm py-2 px-1 sm:px-2">
              Provider
            </TabsTrigger>
            <TabsTrigger value="linkedin-orders" className="text-xs sm:text-sm py-2 px-1 sm:px-2">
              LinkedIn
            </TabsTrigger>
            <TabsTrigger value="secureforms" className="text-xs sm:text-sm py-2 px-1 sm:px-2">
              Forms
            </TabsTrigger>
          </TabsList>

          <TabsContent value="contact">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-4">
              <h2 className="text-xl font-semibold">Contact Messages</h2>
              <div className="flex flex-col sm:flex-row gap-2">
                <Button
                  variant="outline"
                  onClick={() => exportToCSV(contactQuery.data, 'contact-messages')}
                  disabled={contactQuery.isLoading || !contactQuery.data?.length}
                  className="text-sm"
                >
                  <Download className="mr-2 h-4 w-4" /> Export CSV
                </Button>
                <Button
                  variant="outline"
                  onClick={() => contactQuery.refetch()}
                  disabled={contactQuery.isFetching}
                  className="text-sm"
                >
                  Refresh
                </Button>
              </div>
            </div>
            {contactQuery.isFetching ? (
              renderLoading()
            ) : contactQuery.isError ? (
              renderError(contactQuery.error)
            ) : contactQuery.data?.length === 0 ? (
              renderNoData('contact messages')
            ) : (
              <div className="space-y-4">
                {contactQuery.data.map(message => (
                  <Card key={message.id} className={`max-w-2xl mx-auto ${message.isRead ? "opacity-70" : ""}`}>
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-lg">{message.subject || "No Subject"}</CardTitle>
                          <CardDescription className="flex items-center gap-1 mt-1">
                            <Calendar className="h-3 w-3" />
                            {formatDistanceToNow(new Date(message.createdAt), { addSuffix: true })}
                          </CardDescription>
                        </div>
                        {!message.isRead && (<Badge>New</Badge>)}
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-gray-500" />
                        <span className="font-medium">{message.name}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Mail className="h-4 w-4 text-gray-500" />
                        <span>{message.email}</span>
                      </div>
                      <Separator />
                      <div className="pt-2 whitespace-pre-wrap text-gray-700 break-words">
                        {message.message}
                      </div>
                      <div className="pt-2 flex justify-end gap-2">
                        {!message.isRead && (
                          <Button variant="outline" size="sm" onClick={() => markContactAsReadMutation.mutate({ id: message.id })}>
                            Mark as Read
                          </Button>
                        )}
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDelete(deleteContactMutation, message.id, 'contact message')}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="demo">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-4">
              <h2 className="text-xl font-semibold">Demo Requests</h2>
              <div className="flex flex-col sm:flex-row gap-2">
                <Button
                  variant="outline"
                  onClick={() => exportToCSV(demoQuery.data, 'demo-requests')}
                  disabled={demoQuery.isLoading || !demoQuery.data?.length}
                  className="text-sm"
                >
                  <Download className="mr-2 h-4 w-4" /> Export CSV
                </Button>
                <Button
                  variant="outline"
                  onClick={() => demoQuery.refetch()}
                  disabled={demoQuery.isFetching}
                  className="text-sm"
                >
                  Refresh
                </Button>
              </div>
            </div>
            {demoQuery.isFetching ? (
              renderLoading()
            ) : demoQuery.isError ? (
              renderError(demoQuery.error)
            ) : demoQuery.data?.length === 0 ? (
              renderNoData('demo requests')
            ) : (
              <div className="space-y-4">
                {demoQuery.data.map(request => (
                  <Card key={request.id || request._id} className={`max-w-2xl mx-auto ${request.isRead ? "opacity-70" : ""}`}>
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-lg">{request.firstName} {request.lastName}</CardTitle>
                          <CardDescription className="flex items-center gap-1 mt-1">
                            <Calendar className="h-3 w-3" />
                            {formatDistanceToNow(new Date(request.createdAt), { addSuffix: true })}
                          </CardDescription>
                        </div>
                        {!request.isRead && (<Badge>New</Badge>)}
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex items-center gap-2">
                        <Mail className="h-4 w-4 text-gray-500" />
                        <span>{request.email}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Phone className="h-4 w-4 text-gray-500" />
                        <span>{request.phone}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Building className="h-4 w-4 text-gray-500" />
                        <span>{request.company || "Not specified"}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Briefcase className="h-4 w-4 text-gray-500" />
                        <span>{request.designation}</span>
                      </div>
                      <div className="pt-2 flex justify-end gap-2">
                        {!request.isRead && (
                          <Button variant="outline" size="sm" onClick={() => markDemoAsReadMutation.mutate({ id: request.id })}>
                            Mark as Read
                          </Button>
                        )}
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDelete(deleteDemoMutation, request.id, 'demo request')}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="provider">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-4">
              <h2 className="text-xl font-semibold">Provider Registrations</h2>
              <div className="flex flex-col sm:flex-row gap-2">
                <Button
                  variant="outline"
                  onClick={() => exportToCSV(providerQuery.data, 'provider-registrations')}
                  disabled={providerQuery.isLoading || !providerQuery.data?.length}
                  className="text-sm"
                >
                  <Download className="mr-2 h-4 w-4" /> Export CSV
                </Button>
                <Button
                  variant="outline"
                  onClick={() => providerQuery.refetch()}
                  disabled={providerQuery.isFetching}
                  className="text-sm"
                >
                  Refresh
                </Button>
              </div>
            </div>
            {providerQuery.isFetching ? (
              renderLoading()
            ) : providerQuery.isError ? (
              renderError(providerQuery.error)
            ) : providerQuery.data?.length === 0 ? (
              renderNoData('provider registrations')
            ) : (
              <div className="space-y-4">
                {providerQuery.data.map(provider => (
                  <Card key={provider.id} className={`max-w-2xl mx-auto ${provider.isRead ? "opacity-70" : ""}`}>
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-lg">{provider.fullName}</CardTitle>
                          <CardDescription className="flex items-center gap-1 mt-1">
                            <Calendar className="h-3 w-3" />
                            {formatDistanceToNow(new Date(provider.createdAt), { addSuffix: true })}
                          </CardDescription>
                        </div>
                        {!provider.isRead && (<Badge>New</Badge>)}
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex items-center gap-2">
                        <Mail className="h-4 w-4 text-gray-500" />
                        <span>{provider.email}</span>
                      </div>
                      {provider.phone && (
                        <div className="flex items-center gap-2">
                          <Phone className="h-4 w-4 text-gray-500" />
                          <span>{provider.phone}</span>
                        </div>
                      )}
                      <div className="flex items-center gap-2">
                        <Clipboard className="h-4 w-4 text-gray-500" />
                        <span>
                          <a
                            href={provider.linkedinUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-500 hover:underline"
                          >
                            LinkedIn Profile
                          </a>
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={provider.profileStatus === 'verified' ? 'default' : 'outline'}>
                          {provider.profileStatus === 'verified' ? 'Verified Profile' : 'Non-Verified Profile'}
                        </Badge>
                      </div>
                      {provider.additionalInfo && (
                        <>
                          <Separator />
                          <div>
                            <h4 className="text-sm font-medium mb-1">Additional Information:</h4>
                            <p className="text-sm text-gray-600 whitespace-pre-wrap">{provider.additionalInfo}</p>
                          </div>
                        </>
                      )}
                      <div className="pt-2 flex justify-end gap-2">
                        {!provider.isRead && (
                          <Button variant="outline" size="sm" onClick={() => markProviderAsReadMutation.mutate({ id: provider.id })}>
                            Mark as Read
                          </Button>
                        )}
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDelete(deleteProviderMutation, provider.id, 'provider registration')}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="secureforms" className="space-y-6">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
              <h2 className="text-xl font-semibold">Secure Forms</h2>
              <div className="flex flex-col sm:flex-row gap-2">
                <Link href="/admin/secure-forms">
                  <Button
                    className="bg-gradient-to-r from-blue-500 to-blue-700 text-white text-sm w-full sm:w-auto"
                  >
                    <Lock className="mr-2 h-4 w-4" />
                    Manage Secure Forms
                  </Button>
                </Link>
              </div>
            </div>

            <Card className="max-w-2xl mx-auto">
              <CardHeader>
                <CardTitle>Secure Form Management</CardTitle>
                <CardDescription>
                  Create and manage secure forms for collecting sensitive information
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="rounded-lg border p-4">
                    <h3 className="text-lg font-medium mb-2">Generate New Form Link</h3>
                    <p className="text-sm text-gray-500 mb-4">
                      Create a unique, one-time use link for collecting LinkedIn credentials and payment details securely.
                    </p>
                    <Link href="/admin/secure-forms">
                      <Button
                        variant="outline"
                        className="w-full"
                      >
                        Create New Link
                      </Button>
                    </Link>
                  </div>
                  <div className="rounded-lg border p-4">
                    <h3 className="text-lg font-medium mb-2">View Submissions</h3>
                    <p className="text-sm text-gray-500 mb-4">
                      Access and manage all the secure form submissions from users.
                    </p>
                    <Link href="/admin/secure-forms">
                      <Button
                        variant="outline"
                        className="w-full"
                      >
                        View Submissions
                      </Button>
                    </Link>
                  </div>
                </div>
                <div className="mt-4 p-4 bg-amber-50 border border-amber-200 rounded-md">
                  <h4 className="text-amber-800 font-medium">Security Note</h4>
                  <p className="text-sm text-amber-700 mt-1">
                    Secure forms contain sensitive information. Access is restricted to authorized administrators only.
                    All form URLs are single-use and expire after submission.
                  </p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="linkedin-orders">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-4">
              <h2 className="text-xl font-semibold">LinkedIn Connection Orders</h2>
              <div className="flex flex-col sm:flex-row gap-2">
                <Button
                  variant="outline"
                  onClick={() => exportToCSV(linkedinOrdersQuery.data, 'linkedin-connection-orders')}
                  disabled={linkedinOrdersQuery.isLoading || !linkedinOrdersQuery.data?.length}
                  className="text-sm"
                >
                  <Download className="mr-2 h-4 w-4" /> Export CSV
                </Button>
                <Button
                  variant="outline"
                  onClick={() => linkedinOrdersQuery.refetch()}
                  disabled={linkedinOrdersQuery.isFetching}
                  className="text-sm"
                >
                  Refresh
                </Button>
              </div>
            </div>
            {linkedinOrdersQuery.isFetching ? (
              renderLoading()
            ) : linkedinOrdersQuery.isError ? (
              renderError(linkedinOrdersQuery.error)
            ) : linkedinOrdersQuery.data?.length === 0 ? (
              renderNoData('LinkedIn connection orders')
            ) : (
              <div className="grid gap-4">
                {linkedinOrdersQuery.data.map(order => (
                  <Card key={order.id} className="w-full">
                    <CardHeader>
                      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                        <div className="flex-1">
                          <CardTitle className="text-base sm:text-lg">
                            Order #{order.id} - {order.customerName}
                          </CardTitle>
                          <CardDescription className="text-sm">
                            {order.connections} connections • {order.packageName} • ${order.totalPrice}
                          </CardDescription>
                        </div>
                        <div className="flex gap-2">
                          <Badge variant={order.status === 'completed' ? 'default' : order.status === 'processing' ? 'secondary' : 'outline'}>
                            {order.status}
                          </Badge>
                          {!order.isRead && (<Badge variant="destructive">Unread</Badge>)}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 text-sm">
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <Mail className="h-4 w-4 text-gray-500" />
                            <span className="font-medium">Email:</span>
                            <span>{order.email}</span>
                          </div>
                          {order.phone && (
                            <div className="flex items-center gap-2">
                              <Phone className="h-4 w-4 text-gray-500" />
                              <span className="font-medium">Phone:</span>
                              <span>{order.phone}</span>
                            </div>
                          )}
                          <div className="flex items-start gap-2">
                            <Building className="h-4 w-4 text-gray-500 mt-0.5" />
                            <span className="font-medium">LinkedIn:</span>
                            <a href={order.linkedinUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline break-all">
                              {order.linkedinUrl}
                            </a>
                          </div>
                          <div className="flex items-center gap-2">
                            <Clipboard className="h-4 w-4 text-gray-500" />
                            <span className="font-medium">Payment Method:</span>
                            <span>{order.paymentMethod}</span>
                          </div>
                          {order.notes && (
                            <div className="flex items-start gap-2">
                              <MessageCircle className="h-4 w-4 text-gray-500 mt-0.5" />
                              <span className="font-medium">Notes:</span>
                              <span className="text-gray-700 break-words">{order.notes}</span>
                            </div>
                          )}
                        </div>
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <Calendar className="h-4 w-4 text-gray-500" />
                            <span className="font-medium">Order Date:</span>
                            <span>{new Date(order.createdAt).toLocaleString('en-US', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric',
                              hour: '2-digit',
                              minute: '2-digit',
                              second: '2-digit',
                              timeZoneName: 'short'
                            })}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <Clock className="h-4 w-4 text-gray-500" />
                            <span className="font-medium">Time Since:</span>
                            <span>{formatDistanceToNow(new Date(order.createdAt), { addSuffix: true })}</span>
                          </div>
                          {order.paymentScreenshot ? (
                            <div className="space-y-2">
                              <div className="flex items-center gap-2">
                                <Lock className="h-4 w-4 text-green-600" />
                                <span className="font-medium text-green-600">Payment Screenshot:</span>
                              </div>
                              <div className="border rounded-lg p-2 bg-gray-50">
                                <img
                                  src={order.paymentScreenshot}
                                  alt="Payment Screenshot"
                                  className="max-w-full h-auto max-h-48 rounded cursor-pointer hover:opacity-80 transition-opacity"
                                  onClick={() => window.open(order.paymentScreenshot, '_blank')}
                                />
                                <div className="mt-2 text-xs text-gray-600">
                                  Click to view full size
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div className="flex items-center gap-2">
                              <Lock className="h-4 w-4 text-red-500" />
                              <span className="font-medium text-red-500">Payment Screenshot:</span>
                              <span className="text-red-500">Not uploaded</span>
                            </div>
                          )}
                        </div>
                      </div>

                      <Separator className="my-4" />

                      <div className="flex flex-wrap gap-2 justify-between items-center">
                        <div className="flex flex-wrap gap-2">
                          {!order.isRead && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => markLinkedinOrderAsReadMutation.mutate({ id: order.id })}
                              className="text-xs"
                            >
                              Mark as Read
                            </Button>
                          )}
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => updateLinkedInOrderStatusMutation.mutate({ id: order.id, payload: { status: 'processing' } })}
                            disabled={order.status === 'processing'}
                            className="text-xs"
                          >
                            Mark Processing
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => updateLinkedInOrderStatusMutation.mutate({ id: order.id, payload: { status: 'completed' } })}
                            disabled={order.status === 'completed'}
                            className="text-xs"
                          >
                            Mark Completed
                          </Button>
                        </div>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDelete(deleteLinkedinOrderMutation, order.id, 'LinkedIn order')}
                          className="text-xs text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

